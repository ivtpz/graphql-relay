schema {
  query: RootQuery
}

# A Bravisismo customer
type Customer implements Node {
  # The ID of an object
  id: ID!
  index: Int
  guid: ID!
  isActive: Boolean
  age: Int
  name: Name

  # A customer's orders
  orders(after: String, first: Int, before: String, last: Int): OrderConnection
}

# A connection to a list of items.
type CustomerConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CustomerEdge]
}

# An edge in a connection.
type CustomerEdge {
  # The item at the end of the edge
  node: Customer

  # A cursor for use in pagination
  cursor: String!
}

type Name {
  first: String
  last: String
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# A single order with customer data
type Order implements Node {
  # The ID of an object
  id: ID!
  index: Int!
  guid: ID!
  total: String!
  date: String!
}

# A connection to a list of items.
type OrderConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [OrderEdge]
}

# An edge in a connection.
type OrderEdge {
  # The item at the end of the edge
  node: Order

  # A cursor for use in pagination
  cursor: String!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type RootQuery {
  customer(id: ID): Customer
  customers(after: String, first: Int, before: String, last: Int): CustomerConnection

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

